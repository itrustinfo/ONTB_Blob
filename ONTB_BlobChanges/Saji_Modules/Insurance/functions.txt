 public Boolean InsertorUpdateInsuranceDocuments(Guid InsuranceDoc_UID, Guid InsuranceUID, string InsuranceDoc_Name, string InsuranceDoc_Type, string InsuranceDoc_FilePath)
        {
            Boolean sresult = false;
            try
            {
                using (SqlConnection con = new SqlConnection(db.GetConnectionString()))
                {

                    using (SqlCommand cmd = new SqlCommand("usp_Insert_Update_InsuranceDocuments"))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        con.Open();
                        cmd.Parameters.AddWithValue("@InsuranceDoc_UID", InsuranceDoc_UID);
                        cmd.Parameters.AddWithValue("@InsuranceUID", InsuranceUID);
                        cmd.Parameters.AddWithValue("@InsuranceDoc_Name", InsuranceDoc_Name);
                        cmd.Parameters.AddWithValue("@InsuranceDoc_Type", InsuranceDoc_Type);
                        cmd.Parameters.AddWithValue("@InsuranceDoc_FilePath", InsuranceDoc_FilePath);
                        cmd.ExecuteNonQuery();
                        con.Close();
                        sresult = true;
                    }
                }
                return sresult;
            }
            catch (Exception ex)
            {
                return sresult = false;
            }
        }

---------------------------------------

 public byte[] DownloadInsuranceDocument(string insurance_doc_blob_uid, out string file_name)
        {

            try
            {
                SqlConnection con = new SqlConnection(db.GetConnectionString());

                SqlDataReader sdr = null;

                byte[] file_in_bytes = null;

                using (SqlCommand cmd = new SqlCommand("DownloadInsuranceDocBlob"))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", insurance_doc_blob_uid);
                    cmd.Connection = con;
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    sdr.Read();
                    file_in_bytes = (byte[])sdr["BlobData"];
                    file_name = sdr["DocPath"].ToString();

                    con.Close();
                }

                return file_in_bytes;
            }
            catch (Exception ex)
            {
                file_name = "";
                return null;
            }
        }

-------------------------------------------
public Boolean InsertorUpdateInsurancePremium(Guid PremiumUID, Guid InsuranceUID, float Premium_Paid, float Interest, float Penalty,DateTime Premium_PaidDate,DateTime Premium_DueDate,DateTime Next_PremiumDate,string Premium_Receipt,string Remarks,byte[] receipt_blob)
        {
            Boolean sresult = false;
            try
            {
                using (SqlConnection con = new SqlConnection(db.GetConnectionString()))
                {

                    using (SqlCommand cmd = new SqlCommand("usp_InsertorUpdateInsurancePremium"))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        con.Open();
                        cmd.Parameters.AddWithValue("@PremiumUID", PremiumUID);
                        cmd.Parameters.AddWithValue("@InsuranceUID", InsuranceUID);
                        cmd.Parameters.AddWithValue("@Premium_Paid", Premium_Paid);
                        cmd.Parameters.AddWithValue("@Interest", Interest);
                        cmd.Parameters.AddWithValue("@Penalty", Penalty);
                        cmd.Parameters.AddWithValue("@Premium_PaidDate", Premium_PaidDate);
                        cmd.Parameters.AddWithValue("@Premium_DueDate", Premium_DueDate);
                        cmd.Parameters.AddWithValue("@Next_PremiumDate", Next_PremiumDate);
                        cmd.Parameters.AddWithValue("@Premium_Receipt", Premium_Receipt);
                        cmd.Parameters.AddWithValue("@Remarks", Remarks);
                        cmd.Parameters.AddWithValue("@BlobData", receipt_blob);
                        cmd.ExecuteNonQuery();
                        con.Close();
                        sresult = true;
                    }
                }
                return sresult;
            }
            catch (Exception ex)
            {
                return sresult = false;
            }
        }

-------------------------------------

 public byte[] DownloadInsurancePremiumReceipt(string premium_uid, out string file_name)
        {

            try
            {
                SqlConnection con = new SqlConnection(db.GetConnectionString());

                SqlDataReader sdr = null;

                byte[] file_in_bytes = null;

                using (SqlCommand cmd = new SqlCommand("DownloadInsurancePremiumReceiptBlob"))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", premium_uid);
                    cmd.Connection = con;
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    sdr.Read();
                    file_in_bytes = (byte[])sdr["Blob_Data"];
                    file_name = sdr["DocPath"].ToString();

                    con.Close();
                }

                return file_in_bytes;
            }
            catch (Exception ex)
            {
                file_name = "";
                return null;
            }
        }
--------------------------


