SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumenttoBlobLogs](
	[BlobConvertLogUID] [uniqueidentifier] NOT NULL,
	[FileUID] [uniqueidentifier] NULL,
	[FileTable] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
	[Filepath] [varchar](500) NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_DocumenttoBlobLogs] PRIMARY KEY CLUSTERED 
(
	[BlobConvertLogUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[DocumenttoBlobLogs] ADD  CONSTRAINT [DF_DocumenttoBlobLogs_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO


//
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_DocumenttoBlobLog_Insert]
@BlobConvertLogUID uniqueidentifier,
@FileUID uniqueidentifier,
@FileTable varchar(50),
@Status varchar(50),
@Filepath varchar(500)
as
begin

insert into DocumenttoBlobLogs(BlobConvertLogUID,FileUID,FileTable,Status,Filepath)
values(@BlobConvertLogUID,@FileUID,@FileTable,@Status,@Filepath)
end

//
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_GetAllDocumentsby_ProjectUID]
@ProjectUID uniqueidentifier
as
begin

declare @dbname as varchar(50);
Declare @PrjUID as nvarchar(max);
DECLARE @sql NVARCHAR(MAX) ;
set @dbname = (select DbName From MasterDbforBlob Where ProjectUID=@ProjectUID)
set @PrjUID=@ProjectUID

set @sql = N'select * from ActualDocuments where ProjectUID=''' + @PrjUID  + ''' and Delete_Flag=''N'' and ActualDocumentUID not in (select ActualDocumentUID from ' + @dbname + '.dbo.ActualDocumentBlob)'
print @sql
EXEC(@sql)
end

//
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_InsertorUpdateActualDocumentBlob]
@Blob_UID uniqueidentifier,
@ActualDocumentUID uniqueidentifier,
@Blob_Data varbinary(max)
as
begin
if not exists(select Blob_UID from ActualDocumentBlob where ActualDocumentUID=@ActualDocumentUID and Delete_Flag='N')
begin
	insert into ActualDocumentBlob(Blob_UID,ActualDocumentUID,Blob_Data)
	values(@Blob_UID,@ActualDocumentUID,@Blob_Data)
end
else
begin
	update ActualDocumentBlob set Blob_Data=@Blob_Data where ActualDocumentUID=@ActualDocumentUID
end
end

//
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_DocumentStatusBlob_InsertorUpdate]
@StatusBlob_UID uniqueidentifier,
@StatusUID uniqueidentifier,
@DocumentUID uniqueidentifier,
@CoverFileBlob_Data varbinary(max),
@ReviewFileBlob_Data varbinary(max)
as
begin
if not exists(select StatusBlob_UID from DocumentStatus_Blob where StatusUID=@StatusUID and Delete_Flag='N')
begin
if @ReviewFileBlob_Data= -1
begin
	insert into DocumentStatus_Blob(StatusBlob_UID,StatusUID,DocumentUID,CoverFileBlob_Data)
	values(@StatusBlob_UID,@StatusUID,@DocumentUID,@CoverFileBlob_Data)
end
else
begin
	insert into DocumentStatus_Blob(StatusBlob_UID,StatusUID,DocumentUID,CoverFileBlob_Data,ReviewFileBlob_Data)
	values(@StatusBlob_UID,@StatusUID,@DocumentUID,@CoverFileBlob_Data,@ReviewFileBlob_Data)
end
end
else
begin
	if @ReviewFileBlob_Data= -1
	begin
		update DocumentStatus_Blob set CoverFileBlob_Data=@CoverFileBlob_Data
		where StatusUID=@StatusUID and Delete_Flag='N';
	end
	else
	begin
		update DocumentStatus_Blob set CoverFileBlob_Data=@CoverFileBlob_Data,ReviewFileBlob_Data=@ReviewFileBlob_Data
		where StatusUID=@StatusUID and Delete_Flag='N';
	end
end
end


//
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_DocumentVersionBlob_insertorUpdate]
@DocumentVersionBlob uniqueidentifier,
@DocVersion_UID uniqueidentifier,
@DocumentUID uniqueidentifier,
@CoverLetter_Blob varbinary(max),
@ResubmitFile_Blob varbinary(max)
as
begin
if not exists(select DocumentVersionBlob from DocumentVersionBlob where DocVersion_UID=@DocVersion_UID and Delete_Flag='N')
begin
if @CoverLetter_Blob= -1
begin
	insert into DocumentVersionBlob(DocumentVersionBlob,DocVersion_UID,DocumentUID,ResubmitFile_Blob)
	values(@DocumentVersionBlob,@DocVersion_UID,@DocumentUID,@ResubmitFile_Blob)
end
else
begin
	insert into DocumentVersionBlob(DocumentVersionBlob,DocVersion_UID,DocumentUID,CoverLetter_Blob,ResubmitFile_Blob)
	values(@DocumentVersionBlob,@DocVersion_UID,@DocumentUID,@CoverLetter_Blob,@ResubmitFile_Blob)
end
end
else
begin
	if @CoverLetter_Blob= -1
	begin
		update DocumentVersionBlob set ResubmitFile_Blob=@ResubmitFile_Blob
		where DocVersion_UID=@DocVersion_UID and Delete_Flag='N';
	end
	else
	begin
		update DocumentVersionBlob set CoverLetter_Blob=@CoverLetter_Blob,ResubmitFile_Blob=@ResubmitFile_Blob
		where DocVersion_UID=@DocVersion_UID and Delete_Flag='N';
	end
end
end

//
USE [ONTB_Server_Blob]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllDocumentsAttachmentsby_ProjectUID]    Script Date: 4/25/2023 1:11:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER proc [dbo].[usp_GetAllDocumentsAttachmentsby_ProjectUID]
@ProjectUID uniqueidentifier
as
begin

declare @dbname as varchar(50);
Declare @PrjUID as nvarchar(max);
DECLARE @sql NVARCHAR(MAX) ;
set @dbname = (select DbName From MasterDbforBlob Where ProjectUID=@ProjectUID)
set @PrjUID=@ProjectUID


set @sql = N'SELECT * FROM DocumentsAttachments INNER JOIN
                  ActualDocuments ON DocumentsAttachments.ActualDocumentUID = ActualDocuments.ActualDocumentUID
				  Where ActualDocuments.ProjectUID=''' + @PrjUID  + ''' and Delete_Flag=''N'' and DocumentsAttachments.AttachmentUID not in (select AttachmentUID from ' + @dbname + '.dbo.DocumentsAttachments_Blob)'
print @sql
EXEC(@sql)
end